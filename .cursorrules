# MPCrew Project Rules

## Project Structure
1. Backend (Python with CrewAI)
   - Supabase database integration
   - CrewAI framework for trend analysis
   - FastAPI endpoints for news fetching and analysis
   - Category-based trend analysis
   - Automatic blog generation
   - Vector embeddings for RAG-based chat

2. Frontend (Next.js)
   - Supabase client integration
   - Authentication UI (completed)
   - News trend dashboard
   - Category-based content organization
   - Real-time trend updates
   - Chat interface for blog posts

3. Database Schema (Supabase)
   - blogs
     - id
     - title
     - content
     - category
     - created_at
     - image_url
     - trend_score
   - news_articles
     - id
     - title
     - description
     - url
     - category
     - created_at
     - analyzed
   - user_preferences
     - user_id
     - preferred_categories
     - notification_settings
   - workflow_cache
     - id
     - topic
     - category
     - result
     - created_at
   - blog_embeddings
     - id
     - blog_id
     - content
     - title
     - embedding
     - created_at

## Implementation Plan

### Phase 1: Backend API Setup
1. Configure FastAPI endpoints:
   - /api/analyze-trends (POST)
   - /api/blogs (GET)
   - /api/trends (GET)
   - /api/categories (GET)
   - /api/chat (POST)

2. CrewAI Integration:
   - News fetching agent
   - Trend analysis agent
   - Blog generation agent
   - Category classification agent
   - Vector embedding tool
   - RAG-based chat tool

3. Database Operations:
   - Initialize tables
   - Create seed data for categories
   - Implement CRUD operations
   - Set up vector database for embeddings

### Phase 2: Frontend Integration
1. API Integration:
   - Connect frontend with backend endpoints
   - Implement error handling
   - Add loading states

2. Category Management:
   - Implement category filtering
   - Add miscellaneous bucket for unclassified trends
   - Show trending topics per category

3. Content Display:
   - Implement trend visualization
   - Add blog post cards
   - Category-based content organization
   - Chat interface for blog posts

### Phase 3: Testing & Optimization
1. Test Cases:
   - API endpoint testing
   - CrewAI agent testing
   - Frontend integration testing
   - RAG-based chat testing

2. Performance:
   - Optimize database queries
   - Implement caching
   - Add pagination
   - Optimize vector search

## Current Focus
1. Fixed CrewAI Tool Implementation
   - Updated tool functions to use BaseTool class instead of @tool decorator
   - Implemented proper _run and _parse_input methods for each tool
   - Added comprehensive input validation and error handling
   - Fixed parameter handling for all tool functions

2. Fixed Task Context and Data Flow
   - Updated task context to use proper task references
   - Simplified context passing between tasks
   - Improved task descriptions with clear expected outputs
   - Added async_execution=False to ensure sequential execution

3. Fixed Blog Post Saving
   - Implemented proper callback function to save blog posts
   - Fixed 'Tool object is not callable' error in save_blog_callback
   - Added direct handling of final_answer in create_blog_post tool
   - Improved error handling in database operations
   - Added detailed logging for blog post creation process
   - Fixed database schema mismatch by removing summary field from blog post data
   - Enhanced JSON parsing for LLM responses with robust fallback mechanisms
   - Updated blog post generation prompt to exclude summary field
   - Added automatic removal of summary field from LLM responses to match database schema

4. Implemented Caching and Error Recovery
   - Added workflow_cache table for storing workflow results
   - Implemented exponential backoff for API calls
   - Added comprehensive error handling with detailed logging
   - Ensured proper data flow between tasks and tools
   - Added fallback mechanisms for all critical operations
   - Fixed JSON serialization of CrewAI output objects for database storage
   - Added local file caching fallback when database storage fails
   - Created Supabase admin client with service role for elevated permissions

5. Database Schema and RLS Policy Fixes
   - Added workflow_cache table to schema.sql
   - Created database initialization and validation system
   - Implemented proper error handling for database operations
   - Added table record count monitoring
   - Improved application startup with database checks
   - Fixed schema mismatches between code and database
   - Added SQL script to fix Row-Level Security policies for workflow_cache table
   - Created Python script to execute SQL fixes with proper error handling
   - Added SQL function for executing statements with service role privileges
   - Implemented conditional policy creation to avoid conflicts with existing policies

6. Implemented Vector Database and RAG
   - Added pgvector extension to Supabase
   - Created blog_embeddings table for storing vector embeddings
   - Implemented vector embedding tool for creating and searching embeddings
   - Added RAG tool for chat functionality
   - Created chat endpoint in FastAPI
   - Implemented chat interface in frontend
   - Added automatic embedding creation when blog posts are saved
   - Implemented vector similarity search for finding relevant blog posts
   - Added fallback to keyword search when vector search fails

7. Improved Frontend UI
   - Updated blog post cards to display in a grid layout
   - Added image support for blog posts
   - Improved blog post display with better typography
   - Created chat interface for interacting with blog posts
   - Added proper navigation between pages
   - Implemented responsive design for all screen sizes

8. Fixed Chat Functionality
   - Fixed API router configuration to properly include the chat endpoint
   - Updated router.py to only include the chat router since other endpoints are in main.py
   - Verified that the chat endpoint is working correctly with valid blog IDs
   - Ensured proper data flow between frontend and backend for chat functionality
   - Confirmed that the RAG tool is correctly retrieving and generating answers
   - Added error handling for invalid blog IDs and other potential issues
   - Tested the chat functionality with real blog posts

9. Fixed Frontend User Experience
   - Implemented proper navigation from "Read Analysis" and "Chat" buttons
   - Updated the analysis completion UI to include direct action buttons
   - Fixed the "Chat with Trends" functionality to navigate to the chat page with the correct blog ID
   - Enhanced the trend analysis process to always show the latest blogs even if exact match isn't found
   - Improved error handling and user feedback during the analysis process
   - Ensured consistent behavior across main page, category page, and blog page

10. Enhanced Blog Post Display and Refresh
    - Removed the limitation of showing only 6 blog posts on the homepage
    - Added automatic refresh of blog posts every 30 seconds
    - Ensured blog posts are refreshed after a new analysis is completed
    - Added support for pagination if needed in the future
    - Improved the blog post fetching logic to always show the latest content
    - Fixed the issue with buttons not working after analysis completion

## Next Steps
1. Test optimized backend with sample queries
2. Monitor API usage and database operations
3. Implement frontend updates to match new backend capabilities
4. Add error handling and recovery mechanisms
5. Optimize vector search performance
6. Implement more advanced RAG techniques

## Migration Steps
1. Setup Supabase project and get credentials
2. Create database schema in Supabase
3. Update Python tools to use Supabase client
4. Implement authentication in frontend
5. Connect CrewAI agents with Supabase
6. Enable pgvector extension in Supabase
7. Create vector embeddings for existing blog posts

## Required Supabase Setup
1. Supabase Project URL
2. Supabase Anon Key
3. Supabase Service Role Key
4. Database connection string
5. pgvector extension enabled

## Dependencies to Add
1. Backend:
   - supabase-py
   - python-jose[cryptography]
   - fastapi (for API endpoints)
   - pgvector (for vector operations)
   - openai (for embeddings)

2. Frontend:
   - @supabase/supabase-js
   - @supabase/auth-ui-react
   - @supabase/auth-ui-shared
   - framer-motion (for animations) 