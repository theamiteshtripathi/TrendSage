# MPCrew Project Rules

## Project Structure
1. Backend (Python with CrewAI)
   - Supabase database integration
   - CrewAI framework for trend analysis
   - FastAPI endpoints for news fetching and analysis
   - Category-based trend analysis
   - Automatic blog generation

2. Frontend (Next.js)
   - Supabase client integration
   - Authentication UI (completed)
   - News trend dashboard
   - Category-based content organization
   - Real-time trend updates

3. Database Schema (Supabase)
   - blogs
     - id
     - title
     - content
     - category
     - created_at
     - image_url
     - trend_score
   - news_articles
     - id
     - title
     - description
     - url
     - category
     - created_at
     - analyzed
   - user_preferences
     - user_id
     - preferred_categories
     - notification_settings
   - workflow_cache
     - id
     - topic
     - category
     - result
     - created_at

## Implementation Plan

### Phase 1: Backend API Setup
1. Configure FastAPI endpoints:
   - /api/analyze-trends (POST)
   - /api/blogs (GET)
   - /api/trends (GET)
   - /api/categories (GET)

2. CrewAI Integration:
   - News fetching agent
   - Trend analysis agent
   - Blog generation agent
   - Category classification agent

3. Database Operations:
   - Initialize tables
   - Create seed data for categories
   - Implement CRUD operations

### Phase 2: Frontend Integration
1. API Integration:
   - Connect frontend with backend endpoints
   - Implement error handling
   - Add loading states

2. Category Management:
   - Implement category filtering
   - Add miscellaneous bucket for unclassified trends
   - Show trending topics per category

3. Content Display:
   - Implement trend visualization
   - Add blog post cards
   - Category-based content organization

### Phase 3: Testing & Optimization
1. Test Cases:
   - API endpoint testing
   - CrewAI agent testing
   - Frontend integration testing

2. Performance:
   - Optimize database queries
   - Implement caching
   - Add pagination

## Current Focus
1. Fixed CrewAI Tool Implementation
   - Updated tool functions to use BaseTool class instead of @tool decorator
   - Implemented proper _run and _parse_input methods for each tool
   - Added comprehensive input validation and error handling
   - Fixed parameter handling for all tool functions

2. Fixed Task Context and Data Flow
   - Updated task context to use proper task references
   - Simplified context passing between tasks
   - Improved task descriptions with clear expected outputs
   - Added async_execution=False to ensure sequential execution

3. Fixed Blog Post Saving
   - Implemented proper callback function to save blog posts
   - Fixed 'Tool object is not callable' error in save_blog_callback
   - Added direct handling of final_answer in create_blog_post tool
   - Improved error handling in database operations
   - Added detailed logging for blog post creation process

4. Implemented Caching and Error Recovery
   - Added workflow result caching in Supabase
   - Implemented exponential backoff for API calls
   - Added comprehensive error handling with detailed logging
   - Ensured proper data flow between tasks and tools
   - Added fallback mechanisms for all critical operations

5. Database Schema Updates
   - Added workflow_cache table for storing workflow results
   - Ensured proper use of created_at field for ordering
   - Implemented proper error handling for database operations

## Next Steps
1. Test optimized backend with sample queries
2. Monitor API usage and database operations
3. Implement frontend updates to match new backend capabilities
4. Add error handling and recovery mechanisms

## Migration Steps
1. Setup Supabase project and get credentials
2. Create database schema in Supabase
3. Update Python tools to use Supabase client
4. Implement authentication in frontend
5. Connect CrewAI agents with Supabase

## Required Supabase Setup
1. Supabase Project URL
2. Supabase Anon Key
3. Supabase Service Role Key
4. Database connection string

## Dependencies to Add
1. Backend:
   - supabase-py
   - python-jose[cryptography]
   - fastapi (for API endpoints)

2. Frontend:
   - @supabase/supabase-js
   - @supabase/auth-ui-react
   - @supabase/auth-ui-shared 